{
  "version": 3,
  "sources": ["../EventActions.ts"],
  "sourcesContent": ["import { MongoClient, ServerApiVersion, ObjectId } from \"mongodb\";\n\nconst DATABASE_URL = `mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASSWORD}@smartlist-events.4zcyg.mongodb.net/Smartlist-Events?retryWrites=true&w=majority`;\n\nfunction eventInfo(id: string, req): Promise<Array> {\n  return new Promise((resolve, reject) => {\n    if (id.length !== 24) {\n      resolve(false);\n      return;\n    }\n    if (req.session.eventCache) {\n      resolve(req.session.eventCache);\n      return;\n    }\n    MongoClient.connect(DATABASE_URL, (err, db: any) => {\n      if (err) throw err;\n      let dbo = db.db(\"Events\");\n      let query = { _id: new ObjectId(id) };\n      dbo\n        .collection(\"EventList\")\n        .find(query)\n        .toArray((err: any, result: any) => {\n          if (err) throw err;\n          result = result[0];\n          req.session.eventCache = result;\n          resolve(result);\n          db.close();\n        });\n    });\n  });\n}\nfunction eventData(parent: string, table: string): Promise<Array> {\n  return new Promise((resolve, reject) => {\n    MongoClient.connect(DATABASE_URL, (err, db: any) => {\n      if (err) throw err;\n      let dbo = db.db(\"Events\");\n      let query = { parent: new ObjectId(parent) };\n      dbo\n        .collection(table)\n        .find(query)\n        .toArray((err: any, result: any) => {\n          if (err) throw err;\n          resolve(result);\n          db.close();\n        });\n    });\n  });\n}\n\nfunction createEventData(data: Object, table: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    MongoClient.connect(DATABASE_URL, (err, db: any) => {\n      if (err) throw err;\n      var dbo = db.db(\"Events\");\n      dbo.collection(table).insertOne(data, (err: any, res: any) => {\n        if (err) throw err;\n        resolve(res);\n        db.close();\n      });\n    });\n  });\n}\n\nfunction deleteEventData(id: string, table: string): Promise<string> {\n\treturn new Promise((reject, resolve) => {\n\t\tMongoClient.connect(DATABASE_URL, (err, db) => {\n\t\t  if (err) throw err;\n\t\t  let dbo = db.db(\"Events\")\n\t\t  let query = { _id: new ObjectId(id) }\n\t\t  dbo.collection(table).deleteOne(query, (err, obj) => {\n\t\t    if (err) throw err;\n\t\t\t\tresolve(\"1 document deleted\")\n\t\t    db.close()\n\t\t  });\n\t\t});\t\n\t})\n}\n\nexport { eventInfo, eventData, createEventData, deleteEventData }\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAwD;AAExD,MAAM,eAAe,iBAAiB,QAAQ,IAAI,WAAW,QAAQ,IAAI;AAEzE,mBAAmB,IAAY,KAAqB;AAClD,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,QAAI,GAAG,WAAW,IAAI;AACpB,cAAQ;AACR;AAAA;AAEF,QAAI,IAAI,QAAQ,YAAY;AAC1B,cAAQ,IAAI,QAAQ;AACpB;AAAA;AAEF,+BAAY,QAAQ,cAAc,CAAC,KAAK,OAAY;AAClD,UAAI;AAAK,cAAM;AACf,UAAI,MAAM,GAAG,GAAG;AAChB,UAAI,QAAQ,EAAE,KAAK,IAAI,wBAAS;AAChC,UACG,WAAW,aACX,KAAK,OACL,QAAQ,CAAC,MAAU,WAAgB;AAClC,YAAI;AAAK,gBAAM;AACf,iBAAS,OAAO;AAChB,YAAI,QAAQ,aAAa;AACzB,gBAAQ;AACR,WAAG;AAAA;AAAA;AAAA;AAAA;AAKb,mBAAmB,QAAgB,OAA+B;AAChE,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,+BAAY,QAAQ,cAAc,CAAC,KAAK,OAAY;AAClD,UAAI;AAAK,cAAM;AACf,UAAI,MAAM,GAAG,GAAG;AAChB,UAAI,QAAQ,EAAE,QAAQ,IAAI,wBAAS;AACnC,UACG,WAAW,OACX,KAAK,OACL,QAAQ,CAAC,MAAU,WAAgB;AAClC,YAAI;AAAK,gBAAM;AACf,gBAAQ;AACR,WAAG;AAAA;AAAA;AAAA;AAAA;AAMb,yBAAyB,MAAc,OAAgC;AACrE,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,+BAAY,QAAQ,cAAc,CAAC,KAAK,OAAY;AAClD,UAAI;AAAK,cAAM;AACf,UAAI,MAAM,GAAG,GAAG;AAChB,UAAI,WAAW,OAAO,UAAU,MAAM,CAAC,MAAU,QAAa;AAC5D,YAAI;AAAK,gBAAM;AACf,gBAAQ;AACR,WAAG;AAAA;AAAA;AAAA;AAAA;AAMX,yBAAyB,IAAY,OAAgC;AACpE,SAAO,IAAI,QAAQ,CAAC,QAAQ,YAAY;AACvC,+BAAY,QAAQ,cAAc,CAAC,KAAK,OAAO;AAC7C,UAAI;AAAK,cAAM;AACf,UAAI,MAAM,GAAG,GAAG;AAChB,UAAI,QAAQ,EAAE,KAAK,IAAI,wBAAS;AAChC,UAAI,WAAW,OAAO,UAAU,OAAO,CAAC,MAAK,QAAQ;AACnD,YAAI;AAAK,gBAAM;AACjB,gBAAQ;AACN,WAAG;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
